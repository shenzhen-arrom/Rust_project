//1.可以忽略借用规则,可以同时拥有不可变和可变的指针,或者是多个指向相同位置的可变指针
//2.不保证指向的内存是有效的
//3.可以为空
//4.不能实现任何自动清理的功能
fn main(){
    let mut num =5;
    //创建不可变的裸指针,不能在不安全代码块之外解引用裸指针
    let r1 = &num as *const i32;
    //创建可变的裸指针,不能在不安全代码块之外解引用裸指针
    let r2 = &mut num as *mut i32;

    unsafe{
        println!(" r1 is:{}",*r1);
        println!(" r2 is:{}",*r2);
    }
}